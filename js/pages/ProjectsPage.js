import { mountTemplateUrl } from '../utils/dom.js';
// Projects Page Component
export class ProjectsPage {
  constructor() {
    this.projects = [
      {
        id: 1,
        title: 'Ìã∞ÏõîÎìú Î≥¥Ïïà4Ï¢Ö ÌîÑÎ°úÏ†ùÌä∏',
        description: 'Í≥†Í∞ù Î≥¥Ïïà Ïù¥Ïäà Ìï¥Í≤∞ÏùÑ ÏúÑÌïú Ïã†Í∑ú ÌéòÏù¥ÏßÄ Í∞úÎ∞ú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏù∏ Î≥¥Ïïà ÏÑúÎπÑÏä§ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§.',
        category: 'web',
        tags: ['Java', 'Spring', 'JavaScript', 'Security'],
        image: 'üîí',
        features: [
          'Î≥¥Ïïà Ïù¥Ïäà ÏßÑÎã® ÏãúÏä§ÌÖú',
          'Ïã§ÏãúÍ∞Ñ Î≥¥Ïïà ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ',
          'ÏÇ¨Ïö©Ïûê ÎßûÏ∂§Ìòï Î≥¥Ïïà Í∞ÄÏù¥Îìú',
          'Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú',
          'Î≥¥Ïïà Î°úÍ∑∏ Í¥ÄÎ¶¨'
        ],
        techStack: ['Java', 'Spring Framework', 'JavaScript', 'HTML/CSS', 'Oracle DB'],
        demoUrl: '#',
        githubUrl: '#'
      },
      {
        id: 2,
        title: 'Ìã∞ÏõîÎìú VOC ÏãúÏä§ÌÖú Ïö¥ÏòÅ',
        description: 'Í≥†Í∞ù Î¨∏Ïùò Î∞è Î∂àÎßå Ï≤òÎ¶¨Î•º ÏúÑÌïú VOC ÏãúÏä§ÌÖú Ïö¥ÏòÅ Î∞è Í∞úÏÑ† ÏóÖÎ¨¥Î•º Îã¥ÎãπÌñàÏäµÎãàÎã§.',
        category: 'web',
        tags: ['VOC', 'Customer Service', 'Database'],
        image: 'üìû',
        features: [
          'Í≥†Í∞ù Î¨∏Ïùò Î∂ÑÎ•ò Î∞è Ï≤òÎ¶¨',
          'Ïã§ÏãúÍ∞Ñ ÏùëÎãµ ÏãúÏä§ÌÖú',
          'ÌÜµÍ≥Ñ Î∞è Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú',
          'ÏûêÎèô ÏïåÎ¶º ÏãúÏä§ÌÖú',
          'Í≥†Í∞ù ÎßåÏ°±ÎèÑ Ï°∞ÏÇ¨'
        ],
        techStack: ['Java', 'Spring', 'Oracle DB', 'JavaScript', 'Chart.js'],
        demoUrl: '#',
        githubUrl: '#'
      },
      {
        id: 3,
        title: 'ÏÜåÌîÑÌä∏ÏõçÏä§ Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò',
        description: 'ÏÜåÌîÑÌä∏ÏõçÏä§ Ïû¨ÏßÅ Ïãú Í∞úÎ∞úÌïú Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏúºÎ°ú, ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ Î∞è Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÏä§ÌÖúÏùÑ Íµ¨Ï∂ïÌñàÏäµÎãàÎã§.',
        category: 'web',
        tags: ['Java', 'Spring', 'MySQL'],
        image: 'üíª',
        features: [
          'ÏÇ¨Ïö©Ïûê Í∂åÌïú Í¥ÄÎ¶¨',
          'Îç∞Ïù¥ÌÑ∞ CRUD ÏãúÏä§ÌÖú',
          'ÌååÏùº ÏóÖÎ°úÎìú/Îã§Ïö¥Î°úÎìú',
          'Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ÎßÅ',
          'Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±'
        ],
        techStack: ['Java', 'Spring Boot', 'MySQL', 'Thymeleaf', 'Bootstrap'],
        demoUrl: '#',
        githubUrl: '#'
      },
      {
        id: 4,
        title: 'Í∞úÏù∏ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏõπÏÇ¨Ïù¥Ìä∏',
        description: 'ÏàúÏàò JavaScript ES6Î°ú Íµ¨ÌòÑÌïú Î∞òÏùëÌòï Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏõπÏÇ¨Ïù¥Ìä∏ÏûÖÎãàÎã§. React ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏùÑ Í≥†Î†§Ìïú Ïª¥Ìè¨ÎÑåÌä∏ Í∏∞Î∞ò Íµ¨Ï°∞Î°ú ÏÑ§Í≥ÑÌñàÏäµÎãàÎã§.',
        category: 'ui',
        tags: ['JavaScript', 'HTML', 'CSS'],
        image: 'üíº',
        features: [
          'Ïª¥Ìè¨ÎÑåÌä∏ Í∏∞Î∞ò Íµ¨Ï°∞',
          'SPA ÎùºÏö∞ÌåÖ ÏãúÏä§ÌÖú',
          'Î∞òÏùëÌòï ÎîîÏûêÏù∏',
          'Î∂ÄÎìúÎü¨Ïö¥ Ïï†ÎãàÎ©îÏù¥ÏÖò',
          'Ìèº Í≤ÄÏ¶ù ÏãúÏä§ÌÖú'
        ],
        techStack: ['Vanilla JavaScript', 'HTML5', 'CSS3', 'ES6 Modules'],
        demoUrl: '#',
        githubUrl: '#'
      }
    ];
    
    this.currentFilter = 'all';
    this.modal = null;
  }

  async render() {
    const mainContent = document.getElementById('main-content');
    if (!mainContent) return;

    // Update page title
    document.title = 'Ïù¥Î†•ÏÑú-ÌîÑÎ°úÏ†ùÌä∏ - Projects';
    // Mount external template-based layout for projects
    await mountTemplateUrl('/templates/pages/projects.html', mainContent);

    // Render projects
    this.renderProjects();
    
    // Setup event listeners
    this.setupEventListeners();
    
    // Initialize animations
    this.initAnimations();
  }

  renderProjects() {
    const projectsGrid = document.getElementById('projects-grid');
    if (!projectsGrid) return;

    const source = Array.isArray(this.projects) ? this.projects : [];
    const filteredProjects = this.currentFilter === 'all'
      ? source
      : source.filter(project => project && project.category === this.currentFilter);

    projectsGrid.innerHTML = filteredProjects.map(project => `
      <div class="project-card fade-in" data-category="${project.category}" data-project-id="${project.id}">
        <div class="project-image">
          ${project.image}
        </div>
        <div class="project-content">
          <h3 class="project-title">${project.title}</h3>
          <p class="project-description">${project.description}</p>
          <div class="project-tags">
            ${(project.tags || []).map(tag => `<span class="project-tag">${tag}</span>`).join('')}
          </div>
          <div class="project-links">
            <a href="${project.demoUrl}" class="project-link" target="_blank">
              üîó Îç∞Î™® Î≥¥Í∏∞
            </a>
            <a href="${project.githubUrl}" class="project-link" target="_blank">
              üìÅ GitHub
            </a>
          </div>
        </div>
      </div>
    `).join('');
  }

  setupEventListeners() {
    // Filter buttons
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.handleFilterChange(e.target.dataset.filter);
      });
    });

    // Project cards click
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
      card.addEventListener('click', (e) => {
        // Don't open modal if clicking on links
        if (e.target.closest('.project-link')) return;
        
        const projectId = parseInt(card.dataset.projectId);
        this.openProjectModal(projectId);
      });
    });

    // Modal close
    const modal = document.getElementById('project-modal');
    if (modal) {
      const modalOverlay = modal.querySelector('.modal-overlay');
      const modalClose = modal.querySelector('.modal-close');

      modalOverlay?.addEventListener('click', () => this.closeProjectModal());
      modalClose?.addEventListener('click', () => this.closeProjectModal());
    }

    // Escape key to close modal
    this.handleEscapeKey = (e) => {
      if (e.key === 'Escape') {
        this.closeProjectModal();
      }
    };
    document.addEventListener('keydown', this.handleEscapeKey);
  }

  handleFilterChange(filter) {
    this.currentFilter = filter;
    
    // Update active filter button
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
      btn.classList.toggle('active', btn.dataset.filter === filter);
    });

    // Animate out current projects
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
      card.classList.add('hidden');
    });

    // Re-render projects after animation
    setTimeout(() => {
      this.renderProjects();
      this.initAnimations();
    }, 300);
  }

  openProjectModal(projectId) {
    const project = this.projects.find(p => p.id === projectId);
    if (!project) return;

    const modal = document.getElementById('project-modal');
    const modalBody = document.getElementById('modal-body');

    modalBody.innerHTML = `
      <div class="modal-header">
        <h2 class="modal-title">${project.title}</h2>
        <p class="modal-subtitle">${project.description}</p>
      </div>
      
      <div class="modal-image">
        ${project.image}
      </div>
      
      <div class="modal-section">
        <h3>Ï£ºÏöî Í∏∞Îä•</h3>
        <ul class="modal-features">
          ${project.features.map(feature => `<li>${feature}</li>`).join('')}
        </ul>
      </div>
      
      <div class="modal-section">
        <h3>Í∏∞Ïà† Ïä§ÌÉù</h3>
        <div class="modal-tech-stack">
          ${project.techStack.map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
        </div>
      </div>
      
      <div class="modal-actions">
        <a href="${project.demoUrl}" class="btn btn-primary" target="_blank">Îç∞Î™® Î≥¥Í∏∞</a>
        <a href="${project.githubUrl}" class="btn btn-secondary" target="_blank">GitHub</a>
      </div>
    `;

    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  closeProjectModal() {
    const modal = document.getElementById('project-modal');
    if (modal) {
      modal.classList.remove('active');
      document.body.style.overflow = '';
    }
  }

  initAnimations() {
    // Add staggered animation delay to project cards
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach((card, index) => {
      card.style.animationDelay = `${index * 0.1}s`;
      card.classList.remove('hidden');
      card.classList.add('visible');
    });

    // Trigger scroll check for animations
    setTimeout(() => {
      window.dispatchEvent(new Event('scroll'));
    }, 100);
  }

  cleanup() {
    // Close modal if open
    this.closeProjectModal();
    
    // Remove event listeners
    if (this.handleEscapeKey) {
      document.removeEventListener('keydown', this.handleEscapeKey);
    }
  }
}
